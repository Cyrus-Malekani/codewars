<a href="https://www.codewars.com/kata/54da5a58ea159efa38000836"> Find the odd</a>

;;Given an array of integers, find the one that appears an odd number of times.

;;There will always be only one integer that appears an odd number of times.

;;Examples

;;[7] should return 7, because it occurs 1 time (which is odd).
;;[0] should return 0, because it occurs 1 time (which is odd).
;;[1,1,2] should return 2, because it occurs 1 time (which is odd).
;;[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
;;[1,2,2,3,3,3,4,3,3,3,2,2,1] shold return 4, because it appears 1 time (which is odd).

# Python: 
#--------------------------------------
# Solution #1
#--------------------------------------
def find_it(seq):
    for i in seq:
        if seq.count(i)%2!=0:
            return i

#--------------------------------------
# Solution #2
#--------------------------------------
def find_it(seq):
    new_arr = []
    i=0
    
    for i in seq:
        if new_arr.count(i)==0:
            new_arr.append(i)
    
    for i in new_arr:
        if seq.count(i) % 2 != 0:
            return i

#--------------------------------------
# C#:
#--------------------------------------

using System;
using System.Linq;
using System.Collections.Generic;

namespace Solution
{
  class Kata
  {
    public static int find_it(int[] seq) 
    {
      // prepare a lookup for on-the-go checks
      var candidates = new HashSet<int>();
      var values = seq.ToList();

      // check each item in the enumeration
      for (int i = 0; i < values.Count; ++i)
      {
          // check if we have found this value once before
          if (candidates.Contains(values[i]))
          {
              // if yes then it is no longer a candidate for odd occurrences
              candidates.Remove(values[i]);
          }
          else
          {
              // if not then it is either the first time it appears in the enumeration
              // or all previous appearances have found a pair
              // in that case we add it to the lookup as a new candidate for odd occurences
              candidates.Add(values[i]);
          }
      }

      // check if any candidate survived
      if (candidates.Count > 0)
      {
          return candidates.First();
      }
      else
      {
          return 0;
      }
    }    
  }
}

#--------------------------------------
# Clojure:
#--------------------------------------

(ns find-the-odd-int)

(defn find-odd [xs]
  (first (for [[k v] (frequencies xs) :when (odd? v)] k))
  )
  
